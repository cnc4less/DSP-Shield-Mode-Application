#include "fftCode.h"

#pragma DATA_ALIGN(WINDOW_LENGTH) //I2S_DMA_BUF_LEN
int fftBufferL[WINDOW_LENGTH] = {0};
#pragma DATA_ALIGN(WINDOW_LENGTH)
int fftBufferR[WINDOW_LENGTH] = {0};

int windowL[WINDOW_LENGTH] = {0,0,2,4,7,11,16,22,29,36,45,54,64,76,88,101,115,130,146,163,181,200,221,242,264,287,311,336,363,390,419,448,479,511,545,579,615,651,690,729,770,811,855,899,945,993,1041,1091,1143,1196,1250,1306,1364,1423,1483,1545,1609,1674,1741,1810,1880,1952,2025,2100,2177,2256,2336,2419,2503,2589,2676,2766,2857,2950,3046,3143,3242,3342,3445,3550,3657,3766,3876,3989,4104,4220,4339,4460,4583,4708,4834,4963,5094,5227,5362,5500,5639,5780,5924,6069,6216,6366,6517,6671,6827,6984,7144,7306,7469,7635,7803,7972,8144,8318,8493,8670,8850,9031,9214,9399,9585,9774,9964,10156,10350,10545,10742,10941,11141,11343,11546,11751,11957,12165,12374,12585,12797,13010,13225,13441,13658,13876,14095,14315,14537,14759,14982,15206,15431,15657,15883,16111,16338,16567,16796,17025,17255,17486,17716,17947,18178,18410,18641,18873,19104,19335,19567,19798,20029,20260,20490,20720,20949,21178,21406,21634,21861,22087,22313,22537,22761,22983,23205,23425,23644,23862,24079,24294,24508,24720,24931,25140,25347,25553,25756,25958,26158,26356,26553,26746,26938,27128,27315,27500,27682,27863,28040,28215,28388,28557,28725,28889,29050,29209,29365,29518,29667,29814,29958,30098,30236,30370,30500,30628,30752,30873,30990,31104,31214,31321,31424,31524,31620,31712,31801,31885,31966,32044,32117,32187,32253,32315,32373,32427,32477,32523,32565,32603,32638,32668,32694,32716,32735,32749,32759,32765,32767,32765,32759,32749,32735,32716,32694,32668,32638,32603,32565,32523,32477,32427,32373,32315,32253,32187,32117,32044,31966,31885,31801,31712,31620,31524,31424,31321,31214,31104,30990,30873,30752,30628,30500,30370,30236,30098,29958,29814,29667,29518,29365,29209,29050,28889,28725,28557,28388,28215,28040,27863,27682,27500,27315,27128,26938,26746,26553,26356,26158,25958,25756,25553,25347,25140,24931,24720,24508,24294,24079,23862,23644,23425,23205,22983,22761,22537,22313,22087,21861,21634,21406,21178,20949,20720,20490,20260,20029,19798,19567,19335,19104,18873,18641,18410,18178,17947,17716,17486,17255,17025,16796,16567,16338,16111,15883,15657,15431,15206,14982,14759,14537,14315,14095,13876,13658,13441,13225,13010,12797,12585,12374,12165,11957,11751,11546,11343,11141,10941,10742,10545,10350,10156,9964,9774,9585,9399,9214,9031,8850,8670,8493,8318,8144,7972,7803,7635,7469,7306,7144,6984,6827,6671,6517,6366,6216,6069,5924,5780,5639,5500,5362,5227,5094,4963,4834,4708,4583,4460,4339,4220,4104,3989,3876,3766,3657,3550,3445,3342,3242,3143,3046,2950,2857,2766,2676,2589,2503,2419,2336,2256,2177,2100,2025,1952,1880,1810,1741,1674,1609,1545,1483,1423,1364,1306,1250,1196,1143,1091,1041,993,945,899,855,811,770,729,690,651,615,579,545,511,479,448,419,390,363,336,311,287,264,242,221,200,181,163,146,130,115,101,88,76,64,54,45,36,29,22,16,11,7,4,2,0};
int windowR[WINDOW_LENGTH] = {0,0,2,4,7,11,16,22,29,36,45,54,64,76,88,101,115,130,146,163,181,200,221,242,264,287,311,336,363,390,419,448,479,511,545,579,615,651,690,729,770,811,855,899,945,993,1041,1091,1143,1196,1250,1306,1364,1423,1483,1545,1609,1674,1741,1810,1880,1952,2025,2100,2177,2256,2336,2419,2503,2589,2676,2766,2857,2950,3046,3143,3242,3342,3445,3550,3657,3766,3876,3989,4104,4220,4339,4460,4583,4708,4834,4963,5094,5227,5362,5500,5639,5780,5924,6069,6216,6366,6517,6671,6827,6984,7144,7306,7469,7635,7803,7972,8144,8318,8493,8670,8850,9031,9214,9399,9585,9774,9964,10156,10350,10545,10742,10941,11141,11343,11546,11751,11957,12165,12374,12585,12797,13010,13225,13441,13658,13876,14095,14315,14537,14759,14982,15206,15431,15657,15883,16111,16338,16567,16796,17025,17255,17486,17716,17947,18178,18410,18641,18873,19104,19335,19567,19798,20029,20260,20490,20720,20949,21178,21406,21634,21861,22087,22313,22537,22761,22983,23205,23425,23644,23862,24079,24294,24508,24720,24931,25140,25347,25553,25756,25958,26158,26356,26553,26746,26938,27128,27315,27500,27682,27863,28040,28215,28388,28557,28725,28889,29050,29209,29365,29518,29667,29814,29958,30098,30236,30370,30500,30628,30752,30873,30990,31104,31214,31321,31424,31524,31620,31712,31801,31885,31966,32044,32117,32187,32253,32315,32373,32427,32477,32523,32565,32603,32638,32668,32694,32716,32735,32749,32759,32765,32767,32765,32759,32749,32735,32716,32694,32668,32638,32603,32565,32523,32477,32427,32373,32315,32253,32187,32117,32044,31966,31885,31801,31712,31620,31524,31424,31321,31214,31104,30990,30873,30752,30628,30500,30370,30236,30098,29958,29814,29667,29518,29365,29209,29050,28889,28725,28557,28388,28215,28040,27863,27682,27500,27315,27128,26938,26746,26553,26356,26158,25958,25756,25553,25347,25140,24931,24720,24508,24294,24079,23862,23644,23425,23205,22983,22761,22537,22313,22087,21861,21634,21406,21178,20949,20720,20490,20260,20029,19798,19567,19335,19104,18873,18641,18410,18178,17947,17716,17486,17255,17025,16796,16567,16338,16111,15883,15657,15431,15206,14982,14759,14537,14315,14095,13876,13658,13441,13225,13010,12797,12585,12374,12165,11957,11751,11546,11343,11141,10941,10742,10545,10350,10156,9964,9774,9585,9399,9214,9031,8850,8670,8493,8318,8144,7972,7803,7635,7469,7306,7144,6984,6827,6671,6517,6366,6216,6069,5924,5780,5639,5500,5362,5227,5094,4963,4834,4708,4583,4460,4339,4220,4104,3989,3876,3766,3657,3550,3445,3342,3242,3143,3046,2950,2857,2766,2676,2589,2503,2419,2336,2256,2177,2100,2025,1952,1880,1810,1741,1674,1609,1545,1483,1423,1364,1306,1250,1196,1143,1091,1041,993,945,899,855,811,770,729,690,651,615,579,545,511,479,448,419,390,363,336,311,287,264,242,221,200,181,163,146,130,115,101,88,76,64,54,45,36,29,22,16,11,7,4,2,0};
//new blackman window {0,0,2,4,7,11,16,22,29,36,45,54,64,76,88,101,115,130,146,163,181,200,221,242,264,287,311,336,363,390,419,448,479,511,545,579,615,651,690,729,770,811,855,899,945,993,1041,1091,1143,1196,1250,1306,1364,1423,1483,1545,1609,1674,1741,1810,1880,1952,2025,2100,2177,2256,2336,2419,2503,2589,2676,2766,2857,2950,3046,3143,3242,3342,3445,3550,3657,3766,3876,3989,4104,4220,4339,4460,4583,4708,4834,4963,5094,5227,5362,5500,5639,5780,5924,6069,6216,6366,6517,6671,6827,6984,7144,7306,7469,7635,7803,7972,8144,8318,8493,8670,8850,9031,9214,9399,9585,9774,9964,10156,10350,10545,10742,10941,11141,11343,11546,11751,11957,12165,12374,12585,12797,13010,13225,13441,13658,13876,14095,14315,14537,14759,14982,15206,15431,15657,15883,16111,16338,16567,16796,17025,17255,17486,17716,17947,18178,18410,18641,18873,19104,19335,19567,19798,20029,20260,20490,20720,20949,21178,21406,21634,21861,22087,22313,22537,22761,22983,23205,23425,23644,23862,24079,24294,24508,24720,24931,25140,25347,25553,25756,25958,26158,26356,26553,26746,26938,27128,27315,27500,27682,27863,28040,28215,28388,28557,28725,28889,29050,29209,29365,29518,29667,29814,29958,30098,30236,30370,30500,30628,30752,30873,30990,31104,31214,31321,31424,31524,31620,31712,31801,31885,31966,32044,32117,32187,32253,32315,32373,32427,32477,32523,32565,32603,32638,32668,32694,32716,32735,32749,32759,32765,32767,32765,32759,32749,32735,32716,32694,32668,32638,32603,32565,32523,32477,32427,32373,32315,32253,32187,32117,32044,31966,31885,31801,31712,31620,31524,31424,31321,31214,31104,30990,30873,30752,30628,30500,30370,30236,30098,29958,29814,29667,29518,29365,29209,29050,28889,28725,28557,28388,28215,28040,27863,27682,27500,27315,27128,26938,26746,26553,26356,26158,25958,25756,25553,25347,25140,24931,24720,24508,24294,24079,23862,23644,23425,23205,22983,22761,22537,22313,22087,21861,21634,21406,21178,20949,20720,20490,20260,20029,19798,19567,19335,19104,18873,18641,18410,18178,17947,17716,17486,17255,17025,16796,16567,16338,16111,15883,15657,15431,15206,14982,14759,14537,14315,14095,13876,13658,13441,13225,13010,12797,12585,12374,12165,11957,11751,11546,11343,11141,10941,10742,10545,10350,10156,9964,9774,9585,9399,9214,9031,8850,8670,8493,8318,8144,7972,7803,7635,7469,7306,7144,6984,6827,6671,6517,6366,6216,6069,5924,5780,5639,5500,5362,5227,5094,4963,4834,4708,4583,4460,4339,4220,4104,3989,3876,3766,3657,3550,3445,3342,3242,3143,3046,2950,2857,2766,2676,2589,2503,2419,2336,2256,2177,2100,2025,1952,1880,1810,1741,1674,1609,1545,1483,1423,1364,1306,1250,1196,1143,1091,1041,993,945,899,855,811,770,729,690,651,615,579,545,511,479,448,419,390,363,336,311,287,264,242,221,200,181,163,146,130,115,101,88,76,64,54,45,36,29,22,16,11,7,4,2,0}
//old hamming window{1311,1311,1313,1316,1320,1325,1331,1339,1347,1357,1368,1380,1393,1407,1422,1439,1456,1475,1495,1515,1537,1561,1585,1610,1637,1664,1693,1722,1753,1785,1818,1852,1887,1923,1960,1998,2037,2077,2119,2161,2204,2248,2294,2340,2387,2435,2484,2535,2586,2638,2691,2745,2799,2855,2912,2969,3028,3087,3147,3208,3270,3333,3397,3461,3526,3592,3659,3727,3795,3864,3934,4005,4076,4148,4221,4295,4369,4444,4519,4595,4672,4750,4828,4907,4986,5066,5146,5227,5309,5391,5473,5556,5640,5724,5809,5894,5979,6065,6152,6238,6325,6413,6501,6589,6678,6767,6856,6945,7035,7125,7216,7306,7397,7488,7579,7671,7762,7854,7946,8038,8130,8223,8315,8407,8500,8593,8685,8778,8871,8963,9056,9148,9241,9334,9426,9518,9611,9703,9795,9887,9978,10070,10161,10252,10343,10434,10524,10615,10705,10794,10884,10973,11061,11150,11238,11326,11413,11500,11586,11673,11758,11843,11928,12013,12096,12180,12263,12345,12427,12508,12589,12669,12749,12828,12906,12984,13061,13137,13213,13289,13363,13437,13510,13583,13654,13725,13796,13865,13934,14002,14069,14135,14201,14266,14330,14393,14455,14517,14578,14637,14696,14754,14811,14867,14923,14977,15031,15083,15135,15185,15235,15284,15331,15378,15424,15469,15512,15555,15597,15638,15677,15716,15754,15790,15826,15860,15894,15926,15957,15987,16017,16045,16072,16097,16122,16146,16168,16190,16210,16229,16248,16265,16280,16295,16309,16321,16333,16343,16352,16360,16367,16372,16377,16380,16383,16384,16384,16383,16380,16377,16372,16367,16360,16352,16343,16333,16321,16309,16295,16280,16265,16248,16229,16210,16190,16168,16146,16122,16097,16072,16045,16017,15987,15957,15926,15894,15860,15826,15790,15754,15716,15677,15638,15597,15555,15512,15469,15424,15378,15331,15284,15235,15185,15135,15083,15031,14977,14923,14867,14811,14754,14696,14637,14578,14517,14455,14393,14330,14266,14201,14135,14069,14002,13934,13865,13796,13725,13654,13583,13510,13437,13363,13289,13213,13137,13061,12984,12906,12828,12749,12669,12589,12508,12427,12345,12263,12180,12096,12013,11928,11843,11758,11673,11586,11500,11413,11326,11238,11150,11061,10973,10884,10794,10705,10615,10524,10434,10343,10252,10161,10070,9978,9887,9795,9703,9611,9518,9426,9334,9241,9148,9056,8963,8871,8778,8685,8593,8500,8407,8315,8223,8130,8038,7946,7854,7762,7671,7579,7488,7397,7306,7216,7125,7035,6945,6856,6767,6678,6589,6501,6413,6325,6238,6152,6065,5979,5894,5809,5724,5640,5556,5473,5391,5309,5227,5146,5066,4986,4907,4828,4750,4672,4595,4519,4444,4369,4295,4221,4148,4076,4005,3934,3864,3795,3727,3659,3592,3526,3461,3397,3333,3270,3208,3147,3087,3028,2969,2912,2855,2799,2745,2691,2638,2586,2535,2484,2435,2387,2340,2294,2248,2204,2161,2119,2077,2037,1998,1960,1923,1887,1852,1818,1785,1753,1722,1693,1664,1637,1610,1585,1561,1537,1515,1495,1475,1456,1439,1422,1407,1393,1380,1368,1357,1347,1339,1331,1325,1320,1316,1313,1311,1311};

void windowSignal(int * source, int * destination, int *window, int length) //window the given signal.
{
	for(int i = 0; i < length; i++)
    {
      long a = source[i];
      long b = window[i];
      long c = ((long)(a * b)) >> 15;
      destination[i] = (int) c;
    }
}

fftConfig FFTInit() //returns a new FFTConfig
{
	fftConfig config;
	config.enable = 0;
	config.count = 0;
	config.bufferReady = 0;
	config.updateRate = 0;
	config.source = 0;
	config.channel = 0;
        config.length = I2S_DMA_BUF_LEN;
        config.complex = SPECTRUM_MAGNITUDE;
        config.windowType = WINDOW_BLACKMAN;
	return config;
}
fftConfig configFFT(int enable, int updateRate, int source, int channel, int complex, int windowType, int length) //configures an FFTConfig
{
	fftConfig config;

	config.enable = enable;
	config.count = 0;
	config.bufferReady = 0;
	config.updateRate = updateRate / 11.6;
        if(config.updateRate < 2)
          config.updateRate = 2;
	config.source = source;
	config.channel = channel;
        config.length = length;
        config.complex = complex;
        config.windowType = windowType;
        if(channel == CHAN_RIGHT)
        {
        	config.buffer = fftBufferR;
                config.window = windowR;
        }
        else
        {
        	config.buffer = fftBufferL;
                config.window = windowL;
        }
        loadWindow(config);
    return config;
}
void updateSpectrumPointer(fftConfig &config, int* in, int* out, int ** codec)
{
	if(config.enable == 0) //skip if system is disables.
	{
		return;
	}

	//update source ponter on each run.
	int* sourceLoc;
	if(config.source == SOURCE_CODEC)
	{
		sourceLoc = codec[AudioC.activeInBuf];
	}
	else if(config.source == SOURCE_INPUT)
	{
		sourceLoc = in;
	}
	else if(config.source == SOURCE_OUTPUT)
	{
		sourceLoc = out;
	}
                
        if(config.length > I2S_DMA_BUF_LEN) //special case for multi-frame.
        {
          memmove(config.buffer, config.buffer+I2S_DMA_BUF_LEN, config.length-I2S_DMA_BUF_LEN); //shift array left by one block
          memcpy(config.buffer+config.length-I2S_DMA_BUF_LEN, sourceLoc, I2S_DMA_BUF_LEN); //copy new block in at end.
        }
        else
        {
          //if ((config.count >= config.updateRate) && (config.bufferReady == 0))//send ever 100ms
          //{
            memcpy(config.buffer, sourceLoc, I2S_DMA_BUF_LEN); //normal, just copy one block in.
          //}
        }

}
void psd(DATA* source, DATA* dest, int length) // computes magnitude of a vector.
{
  for(int i = 0; i < length; i+=2)
  {
      LDATA a = source[i]; 
      LDATA b = source[i+1];
      LDATA c = (a*a) + (b*b);
      dest[i/2] = sqrt(c/2);
      //dest[i/2] = sqrt(source[i]*source[i] + source[i+1]*source[i+1]);
  }
}
void spectrum(fftConfig &config) //takes a signal and returns the power spectrum;
{
	if(config.enable) //only generate spectrum if system is enabled
	{
            if ((config.count >= config.updateRate) && (config.bufferReady == 0))//send ever 100ms
	    {
                if(1)//config.length < I2S_DMA_BUF_LEN)
                {
        	        config.count = 0;
        	        //then window
        	        if(config.windowType != WINDOW_NONE)
                        {
                          windowSignal(config.buffer, config.buffer, config.window, config.length);
                        }
        	        //then fft
        	        rfft((DATA*)config.buffer,config.length,SCALE);
        	        //if requested, compute PSD
                        if(config.complex == SPECTRUM_MAGNITUDE)
                        {
               	          psd((DATA*) config.buffer, (DATA*) config.buffer, config.length);
                        }
        	        //flag ready to transmit
        	        config.bufferReady = 1;                  
                }
	    }
	    else
	    {
	    	config.count++;
	    }
	}
}
void sendSpectrum(fftConfig &config) //sends the current spectrum for the given configuration
{
	if((config.bufferReady == 1) && (config.enable == 1))
	{
		config.buffer[1] = -128;
                if(config.channel == CHAN_RIGHT)
                {
                  config.buffer[1] = -256;
                }
                if(config.complex == SPECTRUM_COMPLEX)
                {
                  shieldMailbox.transmit(config.buffer,config.length);
                }
                else
                {
                  shieldMailbox.transmit(config.buffer,config.length/2);
                }
		config.bufferReady = 0;
	}
}

void loadWindow(fftConfig &config) //load the appropriate window into the appropriate buffer
{
    File          fileHandle;

    char fileName[32];
    char windowType[20];
    if(config.windowType == WINDOW_BLACKMAN)
    {
      strcpy(windowType, "blck");
    }
    else if(config.windowType == WINDOW_HANN)
    {
      strcpy(windowType, "hann");
    }
    else if(config.windowType == WINDOW_HAMM)
    {
      strcpy(windowType, "hamm");
    }
    else if((config.windowType == WINDOW_RECT) || (config.windowType == WINDOW_NONE))
    {
      return;
    }
    
    sprintf(fileName, "win/%s%d.win",windowType,config.length); //default file name

   #ifdef AUDIO_INTERRUPTION
     AudioC.detachIntr(); //turning off the audio fixes audio / sd card collision
   #endif
   fileHandle = SD.open(fileName, FILE_READ);
   if(fileHandle)
   {
  
     fileHandle.read(config.window, config.length); //load the data
     fileHandle.close();
  
     for(int i = 0; i < config.length; i++) //fix endian-ness of dataset.
     {
       int temp = config.window[i];
       config.window[i] = ((temp & 0x00FF)<<8) + ((temp & 0xFF00)>>8);
     }
   }
//   else //failed file load LED Flag.
//   {
//       asm(" BIT(ST1, #13) = #1"); //flag that we had an incident and try to recover from it.
//   }
   #ifdef AUDIO_INTERRUPTION
     bool status = AudioC.Audio(TRUE);
     AudioC.setSamplingRate(SAMPLING_RATE_44_KHZ);
     if (status == 0)
     {
       AudioC.attachIntr(dmaIsr);
     }
   #endif
}
